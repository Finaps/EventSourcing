// <auto-generated />
using System;
using EventSourcing.EF.Tests.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventSourcing.EF.Tests.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerTestContext))]
    [Migration("20220321121617_AddInitialMigration")]
    partial class AddInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.BankAccount>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("BankAccountEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<BankAccount>");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("EmptyAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<EmptyAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("MockAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<MockAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SimpleAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<SimpleAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SnapshotAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<SnapshotAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.BankAccount>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("BankAccountSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<BankAccount>");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("EmptyAggregateSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<EmptyAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.MockAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("MockAggregateSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<MockAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SimpleAggregateSnapshots", (string)null);
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SnapshotAggregateSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<SnapshotAggregate>");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FactoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.ToTable("BankAccountProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptyProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FactoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.ToTable("EmptyProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockAggregateProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FactoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("bit");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("MockDouble")
                        .HasColumnType("float");

                    b.Property<int>("MockEnum")
                        .HasColumnType("int");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MockString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.ToTable("MockAggregateProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountCreatedEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.BankAccount>");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BankAccountCreatedEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountFundsDepositedEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.BankAccount>");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("BankAccountFundsDepositedEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountFundsTransferredEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.BankAccount>");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreditorAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DebtorAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("BankAccountFundsTransferredEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountFundsWithdrawnEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.BankAccount>");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("BankAccountFundsWithdrawnEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountSnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.BankAccount>");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BankAccountSnapshot");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.AttributeEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>");

                    b.Property<string>("SomeString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AttributeEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptyEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>");

                    b.HasDiscriminator().HasValue("EmptyEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptySnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.EmptyAggregate>");

                    b.HasDiscriminator().HasValue("EmptySnapshot");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("bit");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("MockDouble")
                        .HasColumnType("float");

                    b.Property<int>("MockEnum")
                        .HasColumnType("int");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MockString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MockEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockSnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.MockAggregate>");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("bit");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("MockDouble")
                        .HasColumnType("float");

                    b.Property<int>("MockEnum")
                        .HasColumnType("int");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MockString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MockSnapshot");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.SimpleEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>");

                    b.HasDiscriminator().HasValue("SimpleEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.SnapshotEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>");

                    b.HasDiscriminator().HasValue("SnapshotEvent");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.SnapshotSnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("SnapshotSnapshot");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockAggregateProjection", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockAggregateProjectionPartitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MockAggregateProjectionAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("bit");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("float");

                            b1.Property<string>("MockString")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");

                            b1.ToTable("MockAggregateProjection");

                            b1.WithOwner()
                                .HasForeignKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockAggregateProjectionPartitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MockAggregateProjectionAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("bit");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("float");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId", "Id");

                            b1.ToTable("MockAggregateProjection_MockNestedRecordList");

                            b1.WithOwner()
                                .HasForeignKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockEvent", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockEventPartitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MockEventAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("MockEventIndex")
                                .HasColumnType("bigint");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("bit");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("float");

                            b1.Property<string>("MockString")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex");

                            b1.ToTable("MockAggregateEvents");

                            b1.WithOwner()
                                .HasForeignKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockEventPartitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MockEventAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("MockEventIndex")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("bit");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("float");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex", "Id");

                            b1.ToTable("MockAggregateEvents_MockNestedRecordList");

                            b1.WithOwner()
                                .HasForeignKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockSnapshot", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockSnapshotPartitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MockSnapshotAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("MockSnapshotIndex")
                                .HasColumnType("bigint");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("bit");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("float");

                            b1.Property<string>("MockString")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex");

                            b1.ToTable("MockAggregateSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockSnapshotPartitionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("MockSnapshotAggregateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("MockSnapshotIndex")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("bit");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("float");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex", "Id");

                            b1.ToTable("MockAggregateSnapshots_MockNestedRecordList");

                            b1.WithOwner()
                                .HasForeignKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });
#pragma warning restore 612, 618
        }
    }
}
