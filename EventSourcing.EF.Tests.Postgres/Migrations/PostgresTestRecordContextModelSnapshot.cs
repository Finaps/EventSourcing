// <auto-generated />
using System;
using System.Collections.Generic;
using Finaps.EventSourcing.EF.Tests.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Finaps.EventSourcing.EF.Tests.Postgres.Migrations
{
    [DbContext(typeof(PostgresTestRecordContext))]
    partial class PostgresTestRecordContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("BankAccountEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<BankAccount>");

                    b.HasCheckConstraint("CK_BankAccountEvents_Discriminator", "\"Type\" IN ('Event<BankAccount>', 'BankAccountCreatedEvent', 'BankAccountFundsDepositedEvent', 'BankAccountFundsTransferredEvent', 'BankAccountFundsWithdrawnEvent')");

                    b.HasCheckConstraint("CK_BankAccountEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("EmptyAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<EmptyAggregate>");

                    b.HasCheckConstraint("CK_EmptyAggregateEvents_Discriminator", "\"Type\" IN ('Event<EmptyAggregate>', 'EmptyEvent')");

                    b.HasCheckConstraint("CK_EmptyAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("MockAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<MockAggregate>");

                    b.HasCheckConstraint("CK_MockAggregateEvents_Discriminator", "\"Type\" IN ('Event<MockAggregate>', 'MockEvent')");

                    b.HasCheckConstraint("CK_MockAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("SimpleAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<SimpleAggregate>");

                    b.HasCheckConstraint("CK_SimpleAggregateEvents_Discriminator", "\"Type\" IN ('Event<SimpleAggregate>', 'SimpleEvent')");

                    b.HasCheckConstraint("CK_SimpleAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("SnapshotAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<SnapshotAggregate>");

                    b.HasCheckConstraint("CK_SnapshotAggregateEvents_Discriminator", "\"Type\" IN ('Event<SnapshotAggregate>', 'SnapshotEvent')");

                    b.HasCheckConstraint("CK_SnapshotAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("ReferenceAggregateEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<ReferenceAggregate>");

                    b.HasCheckConstraint("CK_ReferenceAggregateEvents_Discriminator", "\"Type\" IN ('Event<ReferenceAggregate>', 'ReferenceEvent')");

                    b.HasCheckConstraint("CK_ReferenceAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.BankAccount>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("BankAccountSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<BankAccount>");

                    b.HasCheckConstraint("CK_BankAccountSnapshots_Discriminator", "\"Type\" IN ('Snapshot<BankAccount>', 'BankAccountSnapshot')");

                    b.HasCheckConstraint("CK_BankAccountSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("EmptyAggregateSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<EmptyAggregate>");

                    b.HasCheckConstraint("CK_EmptyAggregateSnapshots_Discriminator", "\"Type\" IN ('Snapshot<EmptyAggregate>', 'EmptySnapshot')");

                    b.HasCheckConstraint("CK_EmptyAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.MockAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("MockAggregateSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<MockAggregate>");

                    b.HasCheckConstraint("CK_MockAggregateSnapshots_Discriminator", "\"Type\" IN ('Snapshot<MockAggregate>', 'MockSnapshot')");

                    b.HasCheckConstraint("CK_MockAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SimpleAggregateSnapshots", (string)null);

                    b.HasCheckConstraint("CK_SimpleAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SnapshotAggregateSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<SnapshotAggregate>");

                    b.HasCheckConstraint("CK_SnapshotAggregateSnapshots_Discriminator", "\"Type\" IN ('Snapshot<SnapshotAggregate>', 'SnapshotSnapshot')");

                    b.HasCheckConstraint("CK_SnapshotAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("ReferenceAggregateSnapshots", (string)null);

                    b.HasCheckConstraint("CK_ReferenceAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.BankAccountProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FactoryType")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("BankAccountProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptyProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FactoryType")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("EmptyProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockAggregateProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FactoryType")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("numeric");

                    b.Property<double>("MockDouble")
                        .HasColumnType("double precision");

                    b.Property<int>("MockEnum")
                        .HasColumnType("integer");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("smallint");

                    b.Property<List<float>>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<double?>("MockNullableDouble")
                        .HasColumnType("double precision");

                    b.Property<string>("MockNullableString")
                        .HasColumnType("text");

                    b.Property<string>("MockString")
                        .HasColumnType("text");

                    b.Property<List<string>>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("MockAggregateProjection");

                    b.HasCheckConstraint("CK_MockAggregateProjection_MockEnum_Enum", "\"MockEnum\" IN (0, 1, 2)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.BankAccountCreatedEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("BankAccountCreatedEvent");

                    b.HasCheckConstraint("CK_BankAccountEvents_Discriminator", "\"Type\" IN ('Event<BankAccount>', 'BankAccountCreatedEvent', 'BankAccountFundsDepositedEvent', 'BankAccountFundsTransferredEvent', 'BankAccountFundsWithdrawnEvent')");

                    b.HasCheckConstraint("CK_BankAccountEvents_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_BankAccountCreatedEvent_NotNull", "NOT \"Type\" = 'BankAccountCreatedEvent' OR (\"Name\" IS NOT NULL AND \"Iban\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.BankAccountFundsDepositedEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("BankAccountFundsDepositedEvent");

                    b.HasCheckConstraint("CK_BankAccountEvents_Discriminator", "\"Type\" IN ('Event<BankAccount>', 'BankAccountCreatedEvent', 'BankAccountFundsDepositedEvent', 'BankAccountFundsTransferredEvent', 'BankAccountFundsWithdrawnEvent')");

                    b.HasCheckConstraint("CK_BankAccountEvents_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_BankAccountFundsDepositedEvent_NotNull", "NOT \"Type\" = 'BankAccountFundsDepositedEvent' OR (\"Amount\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.BankAccountFundsTransferredEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreditorAccount")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DebtorAccount")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("BankAccountFundsTransferredEvent");

                    b.HasCheckConstraint("CK_BankAccountEvents_Discriminator", "\"Type\" IN ('Event<BankAccount>', 'BankAccountCreatedEvent', 'BankAccountFundsDepositedEvent', 'BankAccountFundsTransferredEvent', 'BankAccountFundsWithdrawnEvent')");

                    b.HasCheckConstraint("CK_BankAccountEvents_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_BankAccountFundsTransferredEvent_NotNull", "NOT \"Type\" = 'BankAccountFundsTransferredEvent' OR (\"DebtorAccount\" IS NOT NULL AND \"CreditorAccount\" IS NOT NULL AND \"Amount\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.BankAccountFundsWithdrawnEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("BankAccountFundsWithdrawnEvent");

                    b.HasCheckConstraint("CK_BankAccountEvents_Discriminator", "\"Type\" IN ('Event<BankAccount>', 'BankAccountCreatedEvent', 'BankAccountFundsDepositedEvent', 'BankAccountFundsTransferredEvent', 'BankAccountFundsWithdrawnEvent')");

                    b.HasCheckConstraint("CK_BankAccountEvents_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_BankAccountFundsWithdrawnEvent_NotNull", "NOT \"Type\" = 'BankAccountFundsWithdrawnEvent' OR (\"Amount\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.BankAccountSnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.BankAccount>");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("BankAccountSnapshot");

                    b.HasCheckConstraint("CK_BankAccountSnapshots_Discriminator", "\"Type\" IN ('Snapshot<BankAccount>', 'BankAccountSnapshot')");

                    b.HasCheckConstraint("CK_BankAccountSnapshots_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_BankAccountSnapshot_NotNull", "NOT \"Type\" = 'BankAccountSnapshot' OR (\"Name\" IS NOT NULL AND \"Iban\" IS NOT NULL AND \"Balance\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptyEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>");

                    b.HasDiscriminator().HasValue("EmptyEvent");

                    b.HasCheckConstraint("CK_EmptyAggregateEvents_Discriminator", "\"Type\" IN ('Event<EmptyAggregate>', 'EmptyEvent')");

                    b.HasCheckConstraint("CK_EmptyAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptySnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.EmptyAggregate>");

                    b.HasDiscriminator().HasValue("EmptySnapshot");

                    b.HasCheckConstraint("CK_EmptyAggregateSnapshots_Discriminator", "\"Type\" IN ('Snapshot<EmptyAggregate>', 'EmptySnapshot')");

                    b.HasCheckConstraint("CK_EmptyAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("numeric");

                    b.Property<double>("MockDouble")
                        .HasColumnType("double precision");

                    b.Property<int>("MockEnum")
                        .HasColumnType("integer");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("smallint");

                    b.Property<List<float>>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<double?>("MockNullableDouble")
                        .HasColumnType("double precision");

                    b.Property<string>("MockNullableString")
                        .HasColumnType("text");

                    b.Property<string>("MockString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("MockEvent");

                    b.HasCheckConstraint("CK_MockAggregateEvents_Discriminator", "\"Type\" IN ('Event<MockAggregate>', 'MockEvent')");

                    b.HasCheckConstraint("CK_MockAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_MockAggregateEvents_MockEnum_Enum", "\"MockEnum\" IN (0, 1, 2)");

                    b.HasCheckConstraint("CK_MockEvent_NotNull", "NOT \"Type\" = 'MockEvent' OR (\"MockBoolean\" IS NOT NULL AND \"MockString\" IS NOT NULL AND \"MockDecimal\" IS NOT NULL AND \"MockDouble\" IS NOT NULL AND \"MockEnum\" IS NOT NULL AND \"MockFlagEnum\" IS NOT NULL AND \"MockFloatList\" IS NOT NULL AND \"MockStringSet\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockSnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.MockAggregate>");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("numeric");

                    b.Property<double>("MockDouble")
                        .HasColumnType("double precision");

                    b.Property<int>("MockEnum")
                        .HasColumnType("integer");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("smallint");

                    b.Property<List<float>>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<double?>("MockNullableDouble")
                        .HasColumnType("double precision");

                    b.Property<string>("MockNullableString")
                        .HasColumnType("text");

                    b.Property<string>("MockString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue("MockSnapshot");

                    b.HasCheckConstraint("CK_MockAggregateSnapshots_Discriminator", "\"Type\" IN ('Snapshot<MockAggregate>', 'MockSnapshot')");

                    b.HasCheckConstraint("CK_MockAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_MockAggregateSnapshots_MockEnum_Enum", "\"MockEnum\" IN (0, 1, 2)");

                    b.HasCheckConstraint("CK_MockSnapshot_NotNull", "NOT \"Type\" = 'MockSnapshot' OR (\"MockBoolean\" IS NOT NULL AND \"MockString\" IS NOT NULL AND \"MockDecimal\" IS NOT NULL AND \"MockDouble\" IS NOT NULL AND \"MockEnum\" IS NOT NULL AND \"MockFlagEnum\" IS NOT NULL AND \"MockFloatList\" IS NOT NULL AND \"MockStringSet\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.SimpleEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>");

                    b.HasDiscriminator().HasValue("SimpleEvent");

                    b.HasCheckConstraint("CK_SimpleAggregateEvents_Discriminator", "\"Type\" IN ('Event<SimpleAggregate>', 'SimpleEvent')");

                    b.HasCheckConstraint("CK_SimpleAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.SnapshotEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>");

                    b.HasDiscriminator().HasValue("SnapshotEvent");

                    b.HasCheckConstraint("CK_SnapshotAggregateEvents_Discriminator", "\"Type\" IN ('Event<SnapshotAggregate>', 'SnapshotEvent')");

                    b.HasCheckConstraint("CK_SnapshotAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.SnapshotSnapshot", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("SnapshotSnapshot");

                    b.HasCheckConstraint("CK_SnapshotAggregateSnapshots_Discriminator", "\"Type\" IN ('Snapshot<SnapshotAggregate>', 'SnapshotSnapshot')");

                    b.HasCheckConstraint("CK_SnapshotAggregateSnapshots_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_SnapshotSnapshot_NotNull", "NOT \"Type\" = 'SnapshotSnapshot' OR (\"Counter\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.EF.Tests.Mocks.ReferenceEvent", b =>
                {
                    b.HasBaseType("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>");

                    b.Property<Guid?>("EmptyAggregateId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferenceAggregateId")
                        .HasColumnType("uuid");

                    b.HasIndex("PartitionId", "EmptyAggregateId", "ZeroIndex");

                    b.HasIndex("PartitionId", "ReferenceAggregateId", "ZeroIndex");

                    b.HasDiscriminator().HasValue("ReferenceEvent");

                    b.HasCheckConstraint("CK_ReferenceAggregateEvents_Discriminator", "\"Type\" IN ('Event<ReferenceAggregate>', 'ReferenceEvent')");

                    b.HasCheckConstraint("CK_ReferenceAggregateEvents_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_ReferenceEvent_NotNull", "NOT \"Type\" = 'ReferenceEvent' OR (\"ReferenceAggregateId\" IS NOT NULL)");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_BankAccountEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_EmptyAggregateEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_MockAggregateEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_SimpleAggregateEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_SnapshotAggregateEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ReferenceAggregateEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.BankAccount>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.BankAccount>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.BankAccount>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.MockAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.MockAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.MockAggregate>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SimpleAggregate>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Snapshot<EventSourcing.Core.Tests.Mocks.SnapshotAggregate>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSourcing.Core.Snapshot<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", null)
                        .WithOne()
                        .HasForeignKey("EventSourcing.Core.Snapshot<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockAggregateProjection", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockAggregateProjectionPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockAggregateProjectionAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .HasColumnType("text");

                            b1.HasKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");

                            b1.ToTable("MockAggregateProjection");

                            b1.WithOwner()
                                .HasForeignKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockAggregateProjectionPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockAggregateProjectionAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId", "Id");

                            b1.ToTable("MockAggregateProjection_MockNestedRecordList");

                            b1.WithOwner()
                                .HasForeignKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockEvent", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockEventPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockEventAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<long>("MockEventIndex")
                                .HasColumnType("bigint");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .HasColumnType("text");

                            b1.HasKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex");

                            b1.ToTable("MockAggregateEvents");

                            b1.WithOwner()
                                .HasForeignKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockEventPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockEventAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<long>("MockEventIndex")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex", "Id");

                            b1.ToTable("MockAggregateEvents_MockNestedRecordList");

                            b1.WithOwner()
                                .HasForeignKey("MockEventPartitionId", "MockEventAggregateId", "MockEventIndex");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockSnapshot", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockSnapshotPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockSnapshotAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<long>("MockSnapshotIndex")
                                .HasColumnType("bigint");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .HasColumnType("text");

                            b1.HasKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex");

                            b1.ToTable("MockAggregateSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockSnapshotPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockSnapshotAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<long>("MockSnapshotIndex")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex", "Id");

                            b1.ToTable("MockAggregateSnapshots_MockNestedRecordList");

                            b1.WithOwner()
                                .HasForeignKey("MockSnapshotPartitionId", "MockSnapshotAggregateId", "MockSnapshotIndex");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });

            modelBuilder.Entity("EventSourcing.EF.Tests.Mocks.ReferenceEvent", b =>
                {
                    b.HasOne("EventSourcing.Core.Event<EventSourcing.Core.Tests.Mocks.EmptyAggregate>", null)
                        .WithMany()
                        .HasForeignKey("PartitionId", "EmptyAggregateId", "ZeroIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ReferenceEvent_EmptyAggregateId");

                    b.HasOne("EventSourcing.Core.Event<EventSourcing.EF.Tests.Mocks.ReferenceAggregate>", null)
                        .WithMany()
                        .HasForeignKey("PartitionId", "ReferenceAggregateId", "ZeroIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ReferenceEvent_ReferenceAggregateId");
                });
#pragma warning restore 612, 618
        }
    }
}
