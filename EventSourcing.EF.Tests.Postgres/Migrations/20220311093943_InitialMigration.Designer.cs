// <auto-generated />
using System;
using System.Collections.Generic;
using EventSourcing.EF.Tests;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventSourcing.EF.Tests.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20220311093943_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventSourcing.Core.Tests.BankAccountProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .HasColumnType("text");

                    b.Property<string>("FactoryType")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.ToTable("BankAccountProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.EmptyProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .HasColumnType("text");

                    b.Property<string>("FactoryType")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.ToTable("EmptyProjection");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockAggregateProjection", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<string>("AggregateType")
                        .HasColumnType("text");

                    b.Property<string>("FactoryType")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MockBoolean")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MockDecimal")
                        .HasColumnType("numeric");

                    b.Property<double>("MockDouble")
                        .HasColumnType("double precision");

                    b.Property<int>("MockEnum")
                        .HasColumnType("integer");

                    b.Property<byte>("MockFlagEnum")
                        .HasColumnType("smallint");

                    b.Property<List<float>>("MockFloatList")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<string>("MockString")
                        .HasColumnType("text");

                    b.Property<List<string>>("MockStringSet")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("PartitionId", "AggregateId");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Hash");

                    b.ToTable("MockAggregateProjection");
                });

            modelBuilder.Entity("EventSourcing.EF.EventEntity", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasColumnType("text");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("EventEntity");
                });

            modelBuilder.Entity("EventSourcing.EF.SnapshotEntity", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .HasColumnType("text");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("SnapshotEntity");
                });

            modelBuilder.Entity("EventSourcing.Core.Tests.Mocks.MockAggregateProjection", b =>
                {
                    b.OwnsOne("EventSourcing.Core.Tests.Mocks.MockNestedRecord", "MockNestedRecord", b1 =>
                        {
                            b1.Property<Guid>("MockAggregateProjectionPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockAggregateProjectionAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .HasColumnType("text");

                            b1.HasKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");

                            b1.ToTable("MockAggregateProjection");

                            b1.WithOwner()
                                .HasForeignKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");
                        });

                    b.OwnsMany("EventSourcing.Core.Tests.Mocks.MockNestedRecordItem", "MockNestedRecordList", b1 =>
                        {
                            b1.Property<Guid>("MockAggregateProjectionPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MockAggregateProjectionAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("MockBoolean")
                                .HasColumnType("boolean");

                            b1.Property<decimal>("MockDecimal")
                                .HasColumnType("numeric");

                            b1.Property<double>("MockDouble")
                                .HasColumnType("double precision");

                            b1.Property<string>("MockString")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId", "Id");

                            b1.ToTable("MockNestedRecordItem");

                            b1.WithOwner()
                                .HasForeignKey("MockAggregateProjectionPartitionId", "MockAggregateProjectionAggregateId");
                        });

                    b.Navigation("MockNestedRecord")
                        .IsRequired();

                    b.Navigation("MockNestedRecordList");
                });
#pragma warning restore 612, 618
        }
    }
}
