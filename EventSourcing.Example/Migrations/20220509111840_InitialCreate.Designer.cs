// <auto-generated />
using System;
using Finaps.EventSourcing.Example.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventSourcing.Example.Migrations
{
    [DbContext(typeof(ExampleContext))]
    [Migration("20220509111840_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("BasketEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<Basket>");

                    b.HasCheckConstraint("CK_BasketEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Orders.Order>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("OrderEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<Order>");

                    b.HasCheckConstraint("CK_OrderEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long?>("PreviousIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("CASE WHEN \"Index\" = 0 THEN NULL ELSE \"Index\" - 1 END", true);

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("ZeroIndex")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasComputedColumnSql("cast(0 as bigint)", true);

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("PartitionId", "AggregateId", "PreviousIndex");

                    b.ToTable("ProductEvents", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Event<Product>");

                    b.HasCheckConstraint("CK_ProductEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("BasketSnapshots", (string)null);

                    b.HasCheckConstraint("CK_BasketSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Orders.Order>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("OrderSnapshots", (string)null);

                    b.HasCheckConstraint("CK_OrderSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Products.Product>", b =>
                {
                    b.Property<Guid>("PartitionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("PartitionId", "AggregateId", "Index");

                    b.HasIndex("AggregateType");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.ToTable("ProductSnapshots", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Snapshot<Product>");

                    b.HasCheckConstraint("CK_ProductSnapshots_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Baskets.BasketCheckedOutEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>");

                    b.HasDiscriminator().HasValue("BasketCheckedOutEvent");

                    b.HasCheckConstraint("CK_BasketEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Baskets.BasketCreatedEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>");

                    b.Property<TimeSpan>("ExpirationTime")
                        .HasColumnType("interval");

                    b.HasDiscriminator().HasValue("BasketCreatedEvent");

                    b.HasCheckConstraint("CK_BasketEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Baskets.ProductAddedToBasketEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ProductAddedToBasketEvent");

                    b.HasCheckConstraint("CK_BasketEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Baskets.ProductRemovedFromBasketEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductRemovedFromBasketEvent_ProductId");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("ProductRemovedFromBasketEvent_Quantity");

                    b.HasDiscriminator().HasValue("ProductRemovedFromBasketEvent");

                    b.HasCheckConstraint("CK_BasketEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Orders.OrderCreatedEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Orders.Order>");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("OrderCreatedEvent");

                    b.HasCheckConstraint("CK_OrderEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ProductCreatedEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ProductCreatedEvent");

                    b.HasCheckConstraint("CK_ProductEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ProductReservedEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("HeldFor")
                        .HasColumnType("interval");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("ProductReservedEvent_Quantity");

                    b.HasDiscriminator().HasValue("ProductReservedEvent");

                    b.HasCheckConstraint("CK_ProductEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ProductSnapshot", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Products.Product>");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ProductSnapshot");

                    b.HasCheckConstraint("CK_ProductSnapshots_NonNegativeIndex", "\"Index\" >= 0");

                    b.HasCheckConstraint("CK_ProductSnapshot_NotNull", "NOT \"Type\" = 'ProductSnapshot' OR (\"Quantity\" IS NOT NULL)");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ProductSoldEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductSoldEvent_BasketId");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("ProductSoldEvent_Quantity");

                    b.HasDiscriminator().HasValue("ProductSoldEvent");

                    b.HasCheckConstraint("CK_ProductEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ProductStockAddedEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("ProductStockAddedEvent_Quantity");

                    b.HasDiscriminator().HasValue("ProductStockAddedEvent");

                    b.HasCheckConstraint("CK_ProductEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ReservationRemovedEvent", b =>
                {
                    b.HasBaseType("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReservationRemovedEvent_BasketId");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("ReservationRemovedEvent_Quantity");

                    b.HasDiscriminator().HasValue("ReservationRemovedEvent");

                    b.HasCheckConstraint("CK_ProductEvents_NonNegativeIndex", "\"Index\" >= 0");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", b =>
                {
                    b.HasOne("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", null)
                        .WithOne()
                        .HasForeignKey("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_BasketEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Orders.Order>", b =>
                {
                    b.HasOne("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Orders.Order>", null)
                        .WithOne()
                        .HasForeignKey("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Orders.Order>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_OrderEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>", b =>
                {
                    b.HasOne("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>", null)
                        .WithOne()
                        .HasForeignKey("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>", "PartitionId", "AggregateId", "PreviousIndex")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ProductEvents_ConsecutiveIndex");
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", b =>
                {
                    b.HasOne("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", null)
                        .WithOne()
                        .HasForeignKey("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Baskets.Basket>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Orders.Order>", b =>
                {
                    b.HasOne("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Orders.Order>", null)
                        .WithOne()
                        .HasForeignKey("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Orders.Order>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Products.Product>", b =>
                {
                    b.HasOne("Finaps.EventSourcing.Core.Event<Finaps.EventSourcing.Example.Domain.Products.Product>", null)
                        .WithOne()
                        .HasForeignKey("Finaps.EventSourcing.Core.Snapshot<Finaps.EventSourcing.Example.Domain.Products.Product>", "PartitionId", "AggregateId", "Index")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Finaps.EventSourcing.Example.Domain.Products.ProductSnapshot", b =>
                {
                    b.OwnsMany("Finaps.EventSourcing.Example.Domain.Products.Reservation", "Reservations", b1 =>
                        {
                            b1.Property<Guid>("ProductSnapshotPartitionId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("ProductSnapshotAggregateId")
                                .HasColumnType("uuid");

                            b1.Property<long>("ProductSnapshotIndex")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer");

                            b1.HasKey("ProductSnapshotPartitionId", "ProductSnapshotAggregateId", "ProductSnapshotIndex", "Id");

                            b1.ToTable("Reservation");

                            b1.WithOwner()
                                .HasForeignKey("ProductSnapshotPartitionId", "ProductSnapshotAggregateId", "ProductSnapshotIndex");
                        });

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
